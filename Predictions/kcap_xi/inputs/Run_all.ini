[DEFAULT]
CSL_PATH = ../cosmosis-standard-library/
KCAP_PATH = ../kcap/
INOUT_PATH = ../cosmosis_in_out/
COSEBIS_PATH = ../cosebis_cosmosis/
VALUES_NAME = S8_high
SAMPLER_NAME = test
NZ_FILE_NAME = nofz.fits
redshift_name = flinc
nBins_in = 5
RUN_NAME = %(VALUES_NAME)s_%(SAMPLER_NAME)s

OUTPUT_FOLDER = %(INOUT_PATH)s/ForBG/outputs/
INPUT_FOLDER  = %(INOUT_PATH)s/ForBG/inputs/
INPUT_FOLDER_NZ= %(INPUT_FOLDER)s

tmin_in = 0.50
tmax_in = 300.00
nModes_in = 5


[runtime]
sampler = %(SAMPLER_NAME)s


[multinest]

max_iterations=100000
multinest_outfile_root= %(OUTPUT_FOLDER)s/multinest_%(RUN_NAME)s_
resume=T
tolerance = 0.1
constant_efficiency = F
live_points = 500
efficiency = 0.3


[maxlike]
maxiter = 10000 ;Maximum number of iterations of the sampler	(default=1000)
tolerance = 0.001 ;The tolerance parameter for termination. Meaning depends on the sampler. default=1e-3
output_ini = bestfit.ini ;if present, save the resulting parameters to a new ini file with this name	(default= empty)
; output_covmat= string	;if present and the sampler supports it, save the estimated covariance to this file	(default=empty)
method= Nelder-Mead	;The minimization method to use.	Nelder-Mead



[test]
save_dir=%(OUTPUT_FOLDER)s/test_output_%(RUN_NAME)s
fatal_errors=T

[output]
filename=%(OUTPUT_FOLDER)s/output_%(RUN_NAME)s.txt
format=text

[pipeline]

modules =sample_S8 one_parameter_hmcode camb_low_res consistency sigma8_rescale camb extrapolate_power fits_nz projection  cosebis cl2xi pcfs bandpower derived_parameters


values = %(INPUT_FOLDER)s/valueFiles/%(VALUES_NAME)s_values.ini
prior  = %(INPUT_FOLDER)s/valueFiles/%(VALUES_NAME)s_priors.ini

likelihoods = 
extra_output = cosmological_parameters/omega_m cosmological_parameters/sigma_8 cosmological_parameters/S8
quiet=F
timing=T
debug=F


[consistency]
file = %(CSL_PATH)s/utility/consistency/consistency_interface.py


[sample_S8]
file =%(INOUT_PATH)s/utils/sample_S8.py
alpha=0.5


[sigma8_rescale]
file = %(INOUT_PATH)s/utils/sigma8_rescale.py



[derived_parameters]
file = %(KCAP_PATH)s/utils/derived_parameters.py
parameters = S8


[one_parameter_hmcode]
file = %(KCAP_PATH)s/utils/one_parameter_hmcode.py
a_0 = 0.98
a_1 = -0.12

[camb]
file = %(CSL_PATH)s/boltzmann/pycamb/camb_interface.py
mode=transfer
lmax=2650
do_reionization = F
feedback=0
kmax=20.0
zmin=0.0
zmid=2.0
nz_mid=100
zmax=6.0
nz=150
background_zmax=6.0
background_zmin=0.0
background_nz=6000
halofit_verion=mead

[camb_old]
file = %(CSL_PATH)s/boltzmann/camb/camb.so
mode=all
lmax=10
k_eta_max_scalar = 1000
accuracy_boost = 1.0
high_accuracy_default = T
feedback=0
kmin=1e-5
kmax=10.0
nk=200
zmax=6.0
zmin=0.0
;nz=2
background_zmax=6.0
background_zmin=0.0
background_nz=150


[camb_low_res]
file = %(CSL_PATH)s/boltzmann/pycamb/camb_interface.py
mode=transfer
lmax=10
do_reionization = F
feedback=0
kmax=1.0
zmin=0.0
zmid=0.0
nz_mid=0.0
zmax=0.0
nz=1
background_zmax=0.0
background_zmin=0.0
background_nz=1
halofit_verion=mead


[halofit_smith]
file= %(CSL_PATH)s/boltzmann/halofit/halofit_module.so

[halofit_takahashi]
file = %(CSL_PATH)s/boltzmann/halofit_takahashi/halofit_interface.so

[fits_nz]
file = %(CSL_PATH)s/number_density/load_nz_fits/load_nz_fits.py
nz_file = %(INPUT_FOLDER_NZ)s/%(NZ_FILE_NAME)s
data_sets = %(redshift_name)s
prefix_section = T
prefix_extension = T

[projection]
file = %(CSL_PATH)s/structure/projection/project_2d.py
ell_min = 0.1
ell_max = 5.0e5
n_ell = 200
shear-shear = %(redshift_name)s-%(redshift_name)s 
shear-intrinsic =  F
intrinsic-intrinsic = F
;position-shear = sample-sample
verbose = T
get_kernel_peaks = F


[linear_alignment]
file = %(CSL_PATH)s/intrinsic_alignments/la_model/linear_alignments_interface.py
method = bk_corrected


[add_intrinsic]
file=%(CSL_PATH)s/shear/add_intrinsic/add_intrinsic.py
position-shear=False



[extrapolate_power]
file=%(CSL_PATH)s/boltzmann/extrapolate/extrapolate_power.py
kmax=500.0

[cl2xi]
file = %(CSL_PATH)s/shear/cl_to_xi_nicaea/nicaea_interface.so
corr_type = 0

[cosebis]
file = %(COSEBIS_PATH)s/libcosebis_likelihood.so
theta_min = %(tmin_in)s
theta_max = %(tmax_in)s
n_max = %(nModes_in)s
Roots_n_Norms_FolderName = %(COSEBIS_PATH)s/TLogsRootsAndNorms/
Wn_Output_FolderName = %(COSEBIS_PATH)s/WnLog/
Tn_Output_FolderName = %(COSEBIS_PATH)s/TpnLog/

; input_cosebis_filename  = %(INPUT_DATA_NAME)s
; input_covariance_filename = %(INPUT_COV_NAME)s

[pcfs]
file = %(COSEBIS_PATH)s/lib2pcfs_likelihood.so
theta_min_plus=0.5
theta_max_plus=300.40262468
nTheta_plus=9
theta_min_minus=0.5
theta_max_minus=300.0
nTheta_minus=9
add_c_term = 0
; input_2pcfs_filename = %(INPUT_DATA_NAME)s
; input_covariance_filename =  %(INPUT_COV_NAME)s


[bandpower]
file = %(COSEBIS_PATH)s/libbandpower_likelihood.so
type = cosmic_shear_e
Response_function_type = tophat
Analytic = 1 ;use analytic solution for g
output_section_name= bandpower_shear_e ; the DEFAULT is band_power
;input_section_name = shear_cl ; the DEFAULT is shear_cl
;l_min_max_file = l_min_max_file.ascii; a file with minimum and maximum values for ell. If it doesn't exist 
; will look for l_min, l_max and nBands then do log binning between l_min and l_max.
; if the file exists we will ignore l_min,l_max and nBands
l_min=100.0
l_max=1500.0
nBands=8

Apodise=0
Delta_x=0.5 ; apodisation length in arcmins

theta_min=0.25
theta_max=397.0

; input_bandpower_filename = %(INPUT_DATA_NAME)s
; input_covariance_filename =  %(INPUT_COV_NAME)s

Output_FolderName = ./BandPower_outputs/


